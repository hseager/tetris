{"version":3,"sources":["components/Board.tsx","components/NextShape.tsx","classes/Controls.tsx","data/shapes.tsx","classes/ShapeRepository.tsx","classes/Block.tsx","classes/Shape.tsx","classes/CollisionDetection.tsx","classes/GameEvents.tsx","classes/ScoreManager.tsx","classes/GameManager.tsx","components/App.tsx","reportWebVitals.js","index.tsx"],"names":["Board","game","setGame","boardRef","useRef","useEffect","boardContext","current","getContext","currentShape","context","ref","width","height","className","data-testid","NextShape","MoveDirection","nextShapeCanvasRef","nextShapeCanvas","nextShape","Controls","leftKeys","rightKeys","upKeys","downKeys","shapes","name","color","rotations","ShapeRepository","type","this","getShape","Math","floor","random","length","Block","shapePosition","blockSize","x","y","relativeX","relativeY","Shape","position","data","rotation","blocks","_position","strokeSize","strokeColor","getRandomShape","createBlocks","forEach","block","fillStyle","beginPath","rect","fill","lineWidth","strokeStyle","stroke","blockData","row","column","push","isEqual","require","CollisionDetection","shape","pile","collidingWithPile","collidingWithFloor","collidingWithWalls","colliding","pileShape","pileBlock","some","GameEvents","playing","score","scores","ScoreManager","rows","clone","GameManager","gameSpeed","oldTimeStamp","timePassed","lastTick","currentShapeStartingPosition","nextShapeStartingPosition","animationFrameId","gameSpeedChange","setPlaying","window","requestAnimationFrame","timeStamp","gameLoop","cancelAnimationFrame","fillRect","secondsPassed","round","nextMoveShape","detectCollision","gameOver","stop","checkRows","swapNextShape","updateBoard","map","filter","value","index","self","indexOf","clearedRows","counter","clearRow","calculateScore","setScore","newBlocks","clearCanvas","drawShapes","clearRect","draw","direction","nextMove","Up","rotate","Down","Left","Right","App","useState","columns","onKeyPressed","e","key","find","k","moveShape","onClick","start","document","addEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.e5e15736.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react'\r\nimport GameManager from '../classes/GameManager'\r\n\r\ninterface BoardProps {\r\n    game: GameManager\r\n    setGame: React.Dispatch<React.SetStateAction<GameManager>>\r\n}\r\n\r\nfunction Board({ game, setGame } : BoardProps) {\r\n    const boardRef = useRef<HTMLCanvasElement | null>(null)\r\n\r\n    useEffect(() => {\r\n        const boardContext = boardRef.current?.getContext('2d')\r\n        if(boardContext){\r\n            game.boardContext = boardContext\r\n            game.currentShape.context = boardContext\r\n            setGame(game)\r\n        }\r\n    },[game])\r\n\r\n    return (\r\n        <canvas \r\n            ref={boardRef} \r\n            width={game.width} \r\n            height={game.height} \r\n            className=\"border-solid border-8 border-gray-300 bg-white rounded-md mb-6 mr-6\" \r\n            data-testid=\"canvas-element\" />\r\n    )\r\n}\r\n\r\nexport default Board","import { useEffect, useRef } from 'react'\r\nimport GameManager from '../classes/GameManager'\r\n\r\ninterface NextShapeProps {\r\n    game: GameManager,\r\n    setGame: React.Dispatch<React.SetStateAction<GameManager>>\r\n}\r\n\r\nfunction NextShape({ game, setGame } : NextShapeProps){\r\n    const nextShapeCanvasRef = useRef<HTMLCanvasElement | null>(null)\r\n    const width = 80\r\n    const height = 80\r\n\r\n    useEffect(() => {\r\n        const nextShapeCanvas = nextShapeCanvasRef.current?.getContext('2d')\r\n        if(nextShapeCanvas){\r\n            game.nextShapeCanvas = nextShapeCanvas\r\n            game.nextShape.context = nextShapeCanvas\r\n            setGame(game)\r\n        }\r\n    },[game])\r\n\r\n    return (\r\n        <canvas \r\n            ref={nextShapeCanvasRef}\r\n            width={width}\r\n            height={height}\r\n            className=\"border-solid border-8 border-gray-300 bg-white rounded-md p-2 w-20 h-20\" />\r\n    )\r\n}\r\n\r\nexport default NextShape","enum MoveDirection {\r\n    Up,\r\n    Down,\r\n    Left,\r\n    Right\r\n}\r\n\r\nclass Controls {\r\n    static leftKeys = ['a', 'ArrowLeft']\r\n    static rightKeys = ['d', 'ArrowRight']\r\n    static upKeys = ['w', 'ArrowUp']\r\n    static downKeys = ['s', 'ArrowDown']\r\n\r\n    static readonly MoveDirection = MoveDirection\r\n}\r\n\r\nexport default Controls","import ShapeData from \"../classes/ShapeData\"\r\n\r\nconst shapes: Array<ShapeData> = [\r\n    {\r\n        name: 'I',\r\n        color: '#ffadad',\r\n        rotations: [\r\n            [\r\n                [1],\r\n                [1],\r\n                [1],\r\n                [1]\r\n            ],\r\n            [\r\n                [1,1,1,1]\r\n            ]\r\n        ]\r\n    },\r\n    {\r\n        name: 'O',\r\n        color: '#ffd6a5',\r\n        rotations: [\r\n            [\r\n                [1,1],\r\n                [1,1]\r\n            ]\r\n        ]\r\n    },\r\n    {\r\n        name: 'J',\r\n        color: '#fdffb6',\r\n        rotations: [\r\n            [\r\n                [0,1],\r\n                [0,1],\r\n                [1,1]\r\n            ],\r\n            [\r\n                [1,0,0],\r\n                [1,1,1]\r\n            ],\r\n            [\r\n                [1,1],\r\n                [1,0],\r\n                [1,0]\r\n            ],\r\n            [\r\n                [1,1,1],\r\n                [0,0,1]\r\n            ]\r\n        ]\r\n    },\r\n    {\r\n        name: 'L',\r\n        color: '#caffbf',\r\n        rotations: [\r\n            [\r\n                [1,0],\r\n                [1,0],\r\n                [1,1]\r\n            ],\r\n            [\r\n                [1,1,1],\r\n                [1,0,0]\r\n            ],\r\n            [\r\n                [1,1],\r\n                [0,1],\r\n                [0,1]\r\n            ],\r\n            [\r\n                [0,0,1],\r\n                [1,1,1]\r\n            ]\r\n        ]\r\n    },\r\n    {\r\n        name: 'Z',\r\n        color: '#9bf6ff',\r\n        rotations: [\r\n            [\r\n                [1,1,0],\r\n                [0,1,1]\r\n            ],\r\n            [\r\n                [0,1],\r\n                [1,1],\r\n                [1,0]\r\n            ]\r\n        ]\r\n    },\r\n    {\r\n        name: 'S',\r\n        color: '#a0c4ff',\r\n        rotations: [\r\n            [\r\n                [0,1,1],\r\n                [1,1,0]\r\n            ],\r\n            [\r\n                [1,0],\r\n                [1,1],\r\n                [0,1]\r\n            ]\r\n        ]\r\n    },\r\n    {\r\n        name: 'T',\r\n        color: '#bdb2ff',\r\n        rotations: [\r\n            [\r\n                [0,1,0],\r\n                [1,1,1]\r\n            ],\r\n            [\r\n                [1,0],\r\n                [1,1],\r\n                [1,0]\r\n            ],\r\n            [\r\n                [1,1,1],\r\n                [0,1,0]\r\n            ],\r\n            [\r\n                [0,1],\r\n                [1,1],\r\n                [0,1]\r\n            ]\r\n        ]\r\n    }\r\n]\r\n\r\nexport default shapes","import shapes from '../data/shapes'\r\n\r\nclass ShapeRepository {\r\n    static getShape(type: number){\r\n        return shapes[type]\r\n    }\r\n    static getRandomShape(){\r\n        return this.getShape(Math.floor(Math.random() * Math.floor(shapes.length)))\r\n    }\r\n}\r\n\r\nexport default ShapeRepository","import Position from './Position'\r\n\r\nclass Block {\r\n    shapePosition: Position\r\n    blockSize: number\r\n    relativeX: number\r\n    relativeY: number\r\n    constructor(shapePosition: Position, blockSize: number, x: number, y: number){\r\n        this.shapePosition = shapePosition\r\n        this.blockSize = blockSize\r\n        this.relativeX = x\r\n        this.relativeY = y\r\n    }\r\n    get position(): Position {\r\n        return { x: this.shapePosition.x + this.blockSize * this.relativeX, y: this.shapePosition.y + this.blockSize * this.relativeY }\r\n    }\r\n}\r\n\r\nexport default Block","import Position from './Position'\r\nimport ShapeRepository from './ShapeRepository'\r\nimport Block from './Block'\r\nimport ShapeData from './ShapeData'\r\n\r\nclass Shape {\r\n    context: CanvasRenderingContext2D | null\r\n    blockSize: number\r\n    data: ShapeData\r\n    rotation: number\r\n    blocks: Array<Block>\r\n    color: string\r\n    private _position: Position\r\n    private strokeSize = 2\r\n    private strokeColor = 'rgba(0, 0, 0, 0.3)'\r\n\r\n    constructor(context: CanvasRenderingContext2D | null, position: Position, blockSize: number){\r\n        this.context = context\r\n        this.blockSize = blockSize\r\n        this.data = ShapeRepository.getRandomShape()\r\n        this.rotation = 0\r\n        this.blocks = this.createBlocks()\r\n        this.color = this.data.color\r\n        this._position = position\r\n        this.position = position\r\n    }\r\n    get position(){\r\n        return this._position\r\n    }\r\n    set position(position: Position){\r\n        this.blocks.forEach(block => { block.shapePosition = position })\r\n        this._position = position\r\n    }\r\n    draw(){\r\n        if(!this.context) return\r\n        this.context.fillStyle = this.color\r\n        this.blocks.forEach(block => {\r\n            if(this.context){\r\n                this.context.beginPath()\r\n                this.context.rect(block.position.x, block.position.y, this.blockSize, this.blockSize)\r\n                this.context.fill()\r\n                this.context.lineWidth = this.strokeSize\r\n                this.context.strokeStyle = this.strokeColor\r\n                this.context.stroke()\r\n            }\r\n        })\r\n    }\r\n    createBlocks(){\r\n        const blockData = this.data.rotations[this.rotation]\r\n        let blocks: Array<Block> = []\r\n        blockData.forEach((row, y) => {\r\n            row.forEach((column, x) => {\r\n                if(column)\r\n                    blocks.push(new Block(this.position, this.blockSize, x, y))\r\n            })\r\n        })\r\n        return blocks\r\n    }\r\n    rotate(){\r\n        if(this.rotation < this.data.rotations.length - 1)\r\n            this.rotation++\r\n        else\r\n            this.rotation = 0\r\n\r\n        this.blocks = []\r\n        this.blocks = this.createBlocks()\r\n    }\r\n}\r\n\r\nexport default Shape","import Shape from './Shape'\r\nconst isEqual = require('lodash/isEqual')\r\n\r\nclass CollisionDetection {\r\n    static detectCollision(shape: Shape, pile: Array<Shape>, width: number, height: number): boolean {\r\n        if(this.collidingWithPile(shape, pile)\r\n            || this.collidingWithFloor(shape, height)\r\n            || this.collidingWithWalls(shape, width))\r\n            return true\r\n        else\r\n            return false\r\n    }    \r\n    static collidingWithPile(shape: Shape, pile: Array<Shape>): boolean {\r\n        if(pile.length === 0) return false\r\n        let colliding = false\r\n        pile.forEach(pileShape => {\r\n            pileShape.blocks.forEach(pileBlock => {\r\n                if(shape.blocks.some(block => isEqual(block.position, pileBlock.position)))\r\n                    colliding = true\r\n            })\r\n        })\r\n\r\n        return colliding\r\n    }\r\n    static collidingWithFloor(shape: Shape, height: number): boolean {\r\n        if(shape.blocks.some(block => block.position.y >= height))\r\n            return true\r\n\r\n        return false\r\n    }\r\n    static collidingWithWalls(shape: Shape, width: number){\r\n        if(shape.blocks.some(block => block.position.x >= width || block.position.x < 0))\r\n            return true\r\n        \r\n        return false\r\n    }\r\n}\r\n\r\nexport default CollisionDetection","class GameEvents {\r\n    static setPlaying(playing: boolean){}\r\n    static setScore(score: number){}\r\n}\r\nexport default GameEvents","const scores = [100, 300, 500, 800]\r\n\r\nclass ScoreManager {\r\n    static calculateScore(rows: number): number {\r\n        return scores[rows - 1]\r\n    }\r\n}\r\n\r\nexport default ScoreManager","import Shape from './Shape'\r\nimport Controls from './Controls'\r\nimport Position from './Position'\r\nimport CollisionDetection from './CollisionDetection'\r\nimport GameEvents from './GameEvents'\r\nimport ScoreManager from './ScoreManager'\r\nconst clone = require('lodash/cloneDeep')\r\n\r\nclass GameManager {\r\n    boardContext: CanvasRenderingContext2D | null\r\n    nextShapeCanvas: CanvasRenderingContext2D | null\r\n    width: number\r\n    height: number\r\n    blockSize: number\r\n    currentShape: Shape\r\n    gameSpeed: number\r\n    nextShape: Shape\r\n    private playing: boolean\r\n    private oldTimeStamp: number\r\n    private timePassed: number\r\n    private lastTick: number\r\n    private pile: Array<Shape>\r\n    private currentShapeStartingPosition: Position = { x: 80, y: -60 }\r\n    private nextShapeStartingPosition: Position = { x: 10, y: 0 }\r\n    private animationFrameId: number | null\r\n    private score: number\r\n    private gameSpeedChange = 0.02\r\n\r\n    constructor(width: number, height: number, blockSize: number, playing: boolean){\r\n        this.boardContext = null\r\n        this.nextShapeCanvas = null\r\n        this.width = width\r\n        this.height = height\r\n        this.blockSize = blockSize\r\n        this.currentShape = new Shape(this.boardContext, this.currentShapeStartingPosition, blockSize)\r\n        this.nextShape = new Shape(this.nextShapeCanvas, this.nextShapeStartingPosition, blockSize)\r\n        this.playing = playing\r\n        this.oldTimeStamp = 0\r\n        this.timePassed = 0\r\n        this.gameSpeed = 0.5\r\n        this.lastTick = 0\r\n        this.pile = []\r\n        this.animationFrameId = null\r\n        this.score = 0\r\n    }\r\n    start(){\r\n        GameEvents.setPlaying(true)\r\n        this.playing = true\r\n        this.animationFrameId = window.requestAnimationFrame((timeStamp) => { \r\n            this.oldTimeStamp = timeStamp\r\n            this.gameLoop(timeStamp)\r\n        })\r\n    }\r\n    stop(){\r\n        GameEvents.setPlaying(false)\r\n        this.playing = false\r\n        if(this.animationFrameId)\r\n            window.cancelAnimationFrame(this.animationFrameId)\r\n        \r\n        if(this.boardContext){\r\n            this.boardContext.fillStyle = 'rgba(0, 0, 0, 0.3)'\r\n            this.boardContext.fillRect(0, 0, this.width, this.height)\r\n        }\r\n    }\r\n    gameLoop(timeStamp: number){\r\n        if(!this.playing) return\r\n        const secondsPassed = Math.round(timeStamp - this.oldTimeStamp) / 1000\r\n        this.oldTimeStamp = timeStamp\r\n        this.timePassed += secondsPassed\r\n\r\n        if(this.timePassed >= this.lastTick){\r\n            let nextMoveShape: Shape = clone(this.currentShape)\r\n            nextMoveShape.position = { x: this.currentShape.position.x, y: this.currentShape.position.y + this.blockSize }\r\n\r\n            if(!CollisionDetection.detectCollision(nextMoveShape, this.pile, this.width, this.height)){\r\n                this.updateBoard(nextMoveShape)\r\n            } else {\r\n                if(!this.gameOver()){\r\n                    this.pile.push(this.currentShape)\r\n                    this.checkRows()\r\n                    this.swapNextShape()\r\n                } else {\r\n                    this.stop()\r\n                }\r\n            }\r\n\r\n            this.lastTick = this.timePassed + this.gameSpeed\r\n        }\r\n        this.animationFrameId = window.requestAnimationFrame((timeStamp) => { this.gameLoop(timeStamp) })\r\n    }\r\n    gameOver(): boolean {\r\n        if(this.currentShape.blocks.some(block => block.position.y <= 0))\r\n            return true\r\n        return false\r\n    }\r\n    checkRows(){\r\n        const rows = this.currentShape.blocks.map(block => block.position.y).filter((value, index, self) => self.indexOf(value) === index)\r\n        let clearedRows = 0\r\n        rows.forEach(row => {\r\n            let counter = 0\r\n            this.pile.forEach(shape => {\r\n                shape.blocks.forEach(block => {\r\n                    if(block.position.y === row)\r\n                        counter += this.blockSize\r\n                })\r\n            })\r\n            if(counter === this.width){\r\n                clearedRows++\r\n                this.clearRow(row)\r\n            }\r\n        })\r\n        if(clearedRows > 0){\r\n            this.score += ScoreManager.calculateScore(clearedRows)\r\n            GameEvents.setScore(this.score)\r\n            this.gameSpeed -= this.gameSpeedChange\r\n        }\r\n    }\r\n    clearRow(row: number){\r\n        this.pile.forEach(shape => {\r\n            let newBlocks = shape.blocks.filter(block => block.position.y !== row)\r\n            newBlocks.forEach(block => {\r\n                if(block.position.y < row)\r\n                    block.relativeY++\r\n            })\r\n            shape.blocks = newBlocks\r\n        })\r\n    }\r\n    swapNextShape(){\r\n        this.currentShape = this.nextShape\r\n        this.currentShape.context = this.boardContext\r\n        this.currentShape.position = this.currentShapeStartingPosition\r\n        this.nextShape = new Shape(this.nextShapeCanvas, this.nextShapeStartingPosition, this.blockSize)\r\n    }\r\n    updateBoard(shape: Shape){\r\n        this.clearCanvas()\r\n        this.currentShape = shape\r\n        this.drawShapes()\r\n    }\r\n    clearCanvas(){\r\n        this.boardContext?.clearRect(0, 0, this.width, this.height)\r\n        this.nextShapeCanvas?.clearRect(0, 0, this.width, this.height)\r\n    }\r\n    drawShapes(){\r\n        this.nextShape.draw()\r\n        this.currentShape.draw()\r\n        this.pile.forEach(shape => {\r\n            shape.draw()\r\n        })\r\n    }\r\n    moveShape(direction: number){\r\n        if(!this.playing) return\r\n        let nextMove: Position = {...this.currentShape.position}\r\n        let nextMoveShape: Shape = clone(this.currentShape)\r\n        switch (direction){\r\n            case Controls.MoveDirection.Up:\r\n                nextMoveShape.rotate()\r\n                break\r\n            case Controls.MoveDirection.Down:\r\n                nextMove.y = nextMove.y + this.blockSize\r\n                break\r\n            case Controls.MoveDirection.Left:\r\n                nextMove.x = nextMove.x - this.blockSize\r\n                break\r\n            case Controls.MoveDirection.Right:\r\n                nextMove.x = nextMove.x + this.blockSize\r\n                break\r\n        }\r\n        nextMoveShape.position = nextMove\r\n\r\n        if(!CollisionDetection.detectCollision(nextMoveShape, this.pile, this.width, this.height))\r\n            this.updateBoard(nextMoveShape)\r\n    }\r\n}\r\n\r\nexport default GameManager","import { useState, useEffect } from 'react'\r\nimport Board from './Board'\r\nimport NextShape from './NextShape'\r\nimport Controls from '../classes/Controls'\r\nimport GameManager from '../classes/GameManager'\r\nimport GameEvents from '../classes/GameEvents'\r\n\r\nfunction App() {\r\n    const [score, setScore] = useState(0)\r\n    const [playing, setPlaying] = useState(false)\r\n    \r\n    const [columns, setColumns] = useState(10)\r\n    const [width, setWidth] = useState(200)\r\n    const [height, setHeight] = useState(400)\r\n    const [blockSize, setBlockSize] = useState(width / columns)\r\n    const [game, setGame] = useState<GameManager>(new GameManager(width, height, blockSize, playing))\r\n    \r\n    const play = () => {\r\n        setScore(0)\r\n        setGame(new GameManager(width, height, blockSize, playing))\r\n        game.start()\r\n        document.addEventListener('keydown', onKeyPressed)\r\n    }\r\n\r\n    const onKeyPressed = (e: KeyboardEvent) => {\r\n        switch (e.key){\r\n            case Controls.upKeys.find(k => k === e.key):\r\n                game.moveShape(Controls.MoveDirection.Up)\r\n                break\r\n            case Controls.downKeys.find(k => k === e.key):\r\n                game.moveShape(Controls.MoveDirection.Down)\r\n                break\r\n            case Controls.leftKeys.find(k => k === e.key):\r\n                game.moveShape(Controls.MoveDirection.Left)\r\n                break\r\n            case Controls.rightKeys.find(k => k === e.key):\r\n                game.moveShape(Controls.MoveDirection.Right)\r\n                break\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        GameEvents.setPlaying = setPlaying\r\n        GameEvents.setScore = setScore\r\n    },[])\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"pt-4\">Tetris</h1>\r\n            <p className=\"py-2\">Score: {score}</p>\r\n            <div className=\"flex items-start\">\r\n                <Board game={game} setGame={setGame} />\r\n                <NextShape game={game} setGame={setGame} />\r\n            </div>\r\n            {\r\n                !playing && <button className=\"btn\" onClick={play}>Play</button>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}